// This file is generated by rust-protobuf 2.12.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `CommonTypes.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_12_0;

#[derive(PartialEq,Clone,Default)]
pub struct StatusMessage {
    // message fields
    pub status_code: i32,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatusMessage {
    fn default() -> &'a StatusMessage {
        <StatusMessage as ::protobuf::Message>::default_instance()
    }
}

impl StatusMessage {
    pub fn new() -> StatusMessage {
        ::std::default::Default::default()
    }

    // int32 status_code = 1;


    pub fn get_status_code(&self) -> i32 {
        self.status_code
    }
    pub fn clear_status_code(&mut self) {
        self.status_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: i32) {
        self.status_code = v;
    }

    // string text = 2;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StatusMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status_code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status_code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.status_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status_code != 0 {
            os.write_int32(1, self.status_code)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatusMessage {
        StatusMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "status_code",
                    |m: &StatusMessage| { &m.status_code },
                    |m: &mut StatusMessage| { &mut m.status_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &StatusMessage| { &m.text },
                    |m: &mut StatusMessage| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatusMessage>(
                    "StatusMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StatusMessage {
        static mut instance: ::protobuf::lazy::Lazy<StatusMessage> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(StatusMessage::new)
        }
    }
}

impl ::protobuf::Clear for StatusMessage {
    fn clear(&mut self) {
        self.status_code = 0;
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatusMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AttributeDescription {
    // message fields
    pub name: ::std::string::String,
    pub field_type: super::ColumnDataType::ColumnDataType,
    pub is_null: bool,
    pub attribute: ::protobuf::RepeatedField<AttributeDescription>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttributeDescription {
    fn default() -> &'a AttributeDescription {
        <AttributeDescription as ::protobuf::Message>::default_instance()
    }
}

impl AttributeDescription {
    pub fn new() -> AttributeDescription {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .siodb.ColumnDataType type = 2;


    pub fn get_field_type(&self) -> super::ColumnDataType::ColumnDataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::ColumnDataType::ColumnDataType) {
        self.field_type = v;
    }

    // bool is_null = 3;


    pub fn get_is_null(&self) -> bool {
        self.is_null
    }
    pub fn clear_is_null(&mut self) {
        self.is_null = false;
    }

    // Param is passed by value, moved
    pub fn set_is_null(&mut self, v: bool) {
        self.is_null = v;
    }

    // repeated .siodb.AttributeDescription attribute = 4;


    pub fn get_attribute(&self) -> &[AttributeDescription] {
        &self.attribute
    }
    pub fn clear_attribute(&mut self) {
        self.attribute.clear();
    }

    // Param is passed by value, moved
    pub fn set_attribute(&mut self, v: ::protobuf::RepeatedField<AttributeDescription>) {
        self.attribute = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attribute(&mut self) -> &mut ::protobuf::RepeatedField<AttributeDescription> {
        &mut self.attribute
    }

    // Take field
    pub fn take_attribute(&mut self) -> ::protobuf::RepeatedField<AttributeDescription> {
        ::std::mem::replace(&mut self.attribute, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AttributeDescription {
    fn is_initialized(&self) -> bool {
        for v in &self.attribute {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_null = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attribute)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.is_null != false {
            my_size += 2;
        }
        for value in &self.attribute {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL {
            os.write_enum(2, self.field_type.value())?;
        }
        if self.is_null != false {
            os.write_bool(3, self.is_null)?;
        }
        for v in &self.attribute {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttributeDescription {
        AttributeDescription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &AttributeDescription| { &m.name },
                    |m: &mut AttributeDescription| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::ColumnDataType::ColumnDataType>>(
                    "type",
                    |m: &AttributeDescription| { &m.field_type },
                    |m: &mut AttributeDescription| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_null",
                    |m: &AttributeDescription| { &m.is_null },
                    |m: &mut AttributeDescription| { &mut m.is_null },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeDescription>>(
                    "attribute",
                    |m: &AttributeDescription| { &m.attribute },
                    |m: &mut AttributeDescription| { &mut m.attribute },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttributeDescription>(
                    "AttributeDescription",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AttributeDescription {
        static mut instance: ::protobuf::lazy::Lazy<AttributeDescription> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AttributeDescription::new)
        }
    }
}

impl ::protobuf::Clear for AttributeDescription {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL;
        self.is_null = false;
        self.attribute.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttributeDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttributeDescription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ColumnDescription {
    // message fields
    pub name: ::std::string::String,
    pub field_type: super::ColumnDataType::ColumnDataType,
    pub is_null: bool,
    pub attribute: ::protobuf::RepeatedField<AttributeDescription>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColumnDescription {
    fn default() -> &'a ColumnDescription {
        <ColumnDescription as ::protobuf::Message>::default_instance()
    }
}

impl ColumnDescription {
    pub fn new() -> ColumnDescription {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .siodb.ColumnDataType type = 2;


    pub fn get_field_type(&self) -> super::ColumnDataType::ColumnDataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::ColumnDataType::ColumnDataType) {
        self.field_type = v;
    }

    // bool is_null = 3;


    pub fn get_is_null(&self) -> bool {
        self.is_null
    }
    pub fn clear_is_null(&mut self) {
        self.is_null = false;
    }

    // Param is passed by value, moved
    pub fn set_is_null(&mut self, v: bool) {
        self.is_null = v;
    }

    // repeated .siodb.AttributeDescription attribute = 4;


    pub fn get_attribute(&self) -> &[AttributeDescription] {
        &self.attribute
    }
    pub fn clear_attribute(&mut self) {
        self.attribute.clear();
    }

    // Param is passed by value, moved
    pub fn set_attribute(&mut self, v: ::protobuf::RepeatedField<AttributeDescription>) {
        self.attribute = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attribute(&mut self) -> &mut ::protobuf::RepeatedField<AttributeDescription> {
        &mut self.attribute
    }

    // Take field
    pub fn take_attribute(&mut self) -> ::protobuf::RepeatedField<AttributeDescription> {
        ::std::mem::replace(&mut self.attribute, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ColumnDescription {
    fn is_initialized(&self) -> bool {
        for v in &self.attribute {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_null = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attribute)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.is_null != false {
            my_size += 2;
        }
        for value in &self.attribute {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL {
            os.write_enum(2, self.field_type.value())?;
        }
        if self.is_null != false {
            os.write_bool(3, self.is_null)?;
        }
        for v in &self.attribute {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColumnDescription {
        ColumnDescription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ColumnDescription| { &m.name },
                    |m: &mut ColumnDescription| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::ColumnDataType::ColumnDataType>>(
                    "type",
                    |m: &ColumnDescription| { &m.field_type },
                    |m: &mut ColumnDescription| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_null",
                    |m: &ColumnDescription| { &m.is_null },
                    |m: &mut ColumnDescription| { &mut m.is_null },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeDescription>>(
                    "attribute",
                    |m: &ColumnDescription| { &m.attribute },
                    |m: &mut ColumnDescription| { &mut m.attribute },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColumnDescription>(
                    "ColumnDescription",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ColumnDescription {
        static mut instance: ::protobuf::lazy::Lazy<ColumnDescription> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ColumnDescription::new)
        }
    }
}

impl ::protobuf::Clear for ColumnDescription {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = super::ColumnDataType::ColumnDataType::COLUMN_DATA_TYPE_BOOL;
        self.is_null = false;
        self.attribute.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColumnDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColumnDescription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11CommonTypes.proto\x12\x05siodb\x1a\x14ColumnDataType.proto\"D\n\rS\
    tatusMessage\x12\x1f\n\x0bstatus_code\x18\x01\x20\x01(\x05R\nstatusCode\
    \x12\x12\n\x04text\x18\x02\x20\x01(\tR\x04text\"\xa9\x01\n\x14AttributeD\
    escription\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12)\n\x04type\
    \x18\x02\x20\x01(\x0e2\x15.siodb.ColumnDataTypeR\x04type\x12\x17\n\x07is\
    _null\x18\x03\x20\x01(\x08R\x06isNull\x129\n\tattribute\x18\x04\x20\x03(\
    \x0b2\x1b.siodb.AttributeDescriptionR\tattribute\"\xa6\x01\n\x11ColumnDe\
    scription\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12)\n\x04type\
    \x18\x02\x20\x01(\x0e2\x15.siodb.ColumnDataTypeR\x04type\x12\x17\n\x07is\
    _null\x18\x03\x20\x01(\x08R\x06isNull\x129\n\tattribute\x18\x04\x20\x03(\
    \x0b2\x1b.siodb.AttributeDescriptionR\tattributeB\x02H\x01J\xa7\n\n\x06\
    \x12\x04\x06\05\x01\n\xdb\x01\n\x01\x0c\x12\x03\x06\0\x122\x94\x01\x20Co\
    pyright\x20(C)\x202019-2020\x20Siodb\x20GmbH.\x20All\x20rights\x20reserv\
    ed.\n\x20Use\x20of\x20this\x20source\x20code\x20is\x20governed\x20by\x20\
    a\x20license\x20that\x20can\x20be\x20found\n\x20in\x20the\x20LICENSE\x20\
    file.\n2:\x20@file\x20Contains\x20protobuf\x20data\x20types\x20relative\
    \x20to\x20database.\n\n\t\n\x02\x03\0\x12\x03\x08\0\x1e\n\x08\n\x01\x02\
    \x12\x03\n\0\x0e\n\x08\n\x01\x08\x12\x03\x0c\0\x1a\n\t\n\x02\x08\t\x12\
    \x03\x0c\0\x1a\n8\n\x02\x04\0\x12\x04\x0f\0\x16\x01\x1a,*\x20Single\x20m\
    essage\x20from\x20server\x20or\x20IO\x20manager.\x20\n\n\n\x03\x04\0\x01\
    \x12\x03\x0f\x08\x15\n$\n\x04\x04\0\x02\0\x12\x03\x12\x04\x1a\x1a\x17*\
    \x20Message\x20status\x20code.\x20\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x12\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\n\x15\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x12\x18\x19\n\x1d\n\x04\x04\0\x02\x01\x12\x03\x15\
    \x04\x14\x1a\x10*\x20Message\x20text.\x20\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x15\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x15\x0b\x0f\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x12\x13\n@\n\x02\x04\x01\x12\
    \x04\x19\0%\x01\x1a4*\x20Structured\x20column\x20data\x20type\x20attribu\
    te\x20description\x20\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x1c\n\x1b\n\
    \x04\x04\x01\x02\0\x12\x03\x1b\x04\x14\x1a\x0e*\x20Column\x20name.\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1b\x12\x13\n\
    \x1c\n\x04\x04\x01\x02\x01\x12\x03\x1e\x04\x1c\x1a\x0f*\x20Column\x20typ\
    e.\x20\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1e\x04\x12\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x1e\x13\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x1e\x1a\x1b\n,\n\x04\x04\x01\x02\x02\x12\x03!\x04\x15\x1a\x1f*\
    \x20Column\x20can\x20have\x20null\x20values.\x20\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03!\x04\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03!\t\x10\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03!\x13\x14\n4\n\x04\x04\x01\x02\
    \x03\x12\x03$\x040\x1a'*\x20Attributes\x20of\x20a\x20structured\x20data\
    \x20type\x20\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03$\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\x03\x06\x12\x03$\r!\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03$\"+\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03$./\n2\n\x02\x04\x02\x12\
    \x04(\05\x01\x1a&*\x20Describes\x20column\x20returned\x20by\x20server\
    \x20\n\n\n\x03\x04\x02\x01\x12\x03(\x08\x19\n\x1b\n\x04\x04\x02\x02\0\
    \x12\x03+\x04\x14\x1a\x0e*\x20Column\x20name.\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03+\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03+\x0b\x0f\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03+\x12\x13\n\x1c\n\x04\x04\x02\x02\x01\
    \x12\x03.\x04\x1c\x1a\x0f*\x20Column\x20type.\x20\n\x0c\n\x05\x04\x02\
    \x02\x01\x06\x12\x03.\x04\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03.\
    \x13\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03.\x1a\x1b\n,\n\x04\x04\
    \x02\x02\x02\x12\x031\x04\x15\x1a\x1f*\x20Column\x20can\x20have\x20null\
    \x20values.\x20\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x031\x04\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x031\t\x10\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x031\x13\x14\n4\n\x04\x04\x02\x02\x03\x12\x034\x040\x1a'*\x20Attrib\
    utes\x20of\x20a\x20structured\x20data\x20type\x20\n\x0c\n\x05\x04\x02\
    \x02\x03\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x034\r\
    !\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x034\"+\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x034./b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
