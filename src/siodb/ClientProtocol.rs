// This file is generated by rust-protobuf 2.12.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ClientProtocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_12_0;

#[derive(PartialEq,Clone,Default)]
pub struct Command {
    // message fields
    pub request_id: u64,
    pub text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // uint64 request_id = 1;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }

    // string text = 2;


    pub fn get_text(&self) -> &str {
        &self.text
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        &mut self.text
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Command {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_id != 0 {
            os.write_uint64(1, self.request_id)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command {
        Command::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "request_id",
                    |m: &Command| { &m.request_id },
                    |m: &mut Command| { &mut m.request_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &Command| { &m.text },
                    |m: &mut Command| { &mut m.text },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Command>(
                    "Command",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command {
        static mut instance: ::protobuf::lazy::Lazy<Command> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Command::new)
        }
    }
}

impl ::protobuf::Clear for Command {
    fn clear(&mut self) {
        self.request_id = 0;
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerResponse {
    // message fields
    pub request_id: u64,
    pub message: ::protobuf::RepeatedField<super::CommonTypes::StatusMessage>,
    pub column_description: ::protobuf::RepeatedField<super::CommonTypes::ColumnDescription>,
    pub freetext_message: ::protobuf::RepeatedField<::std::string::String>,
    pub response_id: u32,
    pub response_count: u32,
    pub has_affected_row_count: bool,
    pub affected_row_count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerResponse {
    fn default() -> &'a ServerResponse {
        <ServerResponse as ::protobuf::Message>::default_instance()
    }
}

impl ServerResponse {
    pub fn new() -> ServerResponse {
        ::std::default::Default::default()
    }

    // uint64 request_id = 1;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }

    // repeated .siodb.StatusMessage message = 2;


    pub fn get_message(&self) -> &[super::CommonTypes::StatusMessage] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::protobuf::RepeatedField<super::CommonTypes::StatusMessage>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut ::protobuf::RepeatedField<super::CommonTypes::StatusMessage> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::protobuf::RepeatedField<super::CommonTypes::StatusMessage> {
        ::std::mem::replace(&mut self.message, ::protobuf::RepeatedField::new())
    }

    // repeated .siodb.ColumnDescription column_description = 3;


    pub fn get_column_description(&self) -> &[super::CommonTypes::ColumnDescription] {
        &self.column_description
    }
    pub fn clear_column_description(&mut self) {
        self.column_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_description(&mut self, v: ::protobuf::RepeatedField<super::CommonTypes::ColumnDescription>) {
        self.column_description = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_description(&mut self) -> &mut ::protobuf::RepeatedField<super::CommonTypes::ColumnDescription> {
        &mut self.column_description
    }

    // Take field
    pub fn take_column_description(&mut self) -> ::protobuf::RepeatedField<super::CommonTypes::ColumnDescription> {
        ::std::mem::replace(&mut self.column_description, ::protobuf::RepeatedField::new())
    }

    // repeated string freetext_message = 4;


    pub fn get_freetext_message(&self) -> &[::std::string::String] {
        &self.freetext_message
    }
    pub fn clear_freetext_message(&mut self) {
        self.freetext_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_freetext_message(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.freetext_message = v;
    }

    // Mutable pointer to the field.
    pub fn mut_freetext_message(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.freetext_message
    }

    // Take field
    pub fn take_freetext_message(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.freetext_message, ::protobuf::RepeatedField::new())
    }

    // uint32 response_id = 5;


    pub fn get_response_id(&self) -> u32 {
        self.response_id
    }
    pub fn clear_response_id(&mut self) {
        self.response_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_response_id(&mut self, v: u32) {
        self.response_id = v;
    }

    // uint32 response_count = 6;


    pub fn get_response_count(&self) -> u32 {
        self.response_count
    }
    pub fn clear_response_count(&mut self) {
        self.response_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_response_count(&mut self, v: u32) {
        self.response_count = v;
    }

    // bool has_affected_row_count = 7;


    pub fn get_has_affected_row_count(&self) -> bool {
        self.has_affected_row_count
    }
    pub fn clear_has_affected_row_count(&mut self) {
        self.has_affected_row_count = false;
    }

    // Param is passed by value, moved
    pub fn set_has_affected_row_count(&mut self, v: bool) {
        self.has_affected_row_count = v;
    }

    // uint64 affected_row_count = 8;


    pub fn get_affected_row_count(&self) -> u64 {
        self.affected_row_count
    }
    pub fn clear_affected_row_count(&mut self) {
        self.affected_row_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_affected_row_count(&mut self, v: u64) {
        self.affected_row_count = v;
    }
}

impl ::protobuf::Message for ServerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.column_description {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.column_description)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.freetext_message)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.response_id = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.response_count = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_affected_row_count = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.affected_row_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.message {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.column_description {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.freetext_message {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.response_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.response_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.response_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.response_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_affected_row_count != false {
            my_size += 2;
        }
        if self.affected_row_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.affected_row_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_id != 0 {
            os.write_uint64(1, self.request_id)?;
        }
        for v in &self.message {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.column_description {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.freetext_message {
            os.write_string(4, &v)?;
        };
        if self.response_id != 0 {
            os.write_uint32(5, self.response_id)?;
        }
        if self.response_count != 0 {
            os.write_uint32(6, self.response_count)?;
        }
        if self.has_affected_row_count != false {
            os.write_bool(7, self.has_affected_row_count)?;
        }
        if self.affected_row_count != 0 {
            os.write_uint64(8, self.affected_row_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerResponse {
        ServerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "request_id",
                    |m: &ServerResponse| { &m.request_id },
                    |m: &mut ServerResponse| { &mut m.request_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::CommonTypes::StatusMessage>>(
                    "message",
                    |m: &ServerResponse| { &m.message },
                    |m: &mut ServerResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::CommonTypes::ColumnDescription>>(
                    "column_description",
                    |m: &ServerResponse| { &m.column_description },
                    |m: &mut ServerResponse| { &mut m.column_description },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "freetext_message",
                    |m: &ServerResponse| { &m.freetext_message },
                    |m: &mut ServerResponse| { &mut m.freetext_message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "response_id",
                    |m: &ServerResponse| { &m.response_id },
                    |m: &mut ServerResponse| { &mut m.response_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "response_count",
                    |m: &ServerResponse| { &m.response_count },
                    |m: &mut ServerResponse| { &mut m.response_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_affected_row_count",
                    |m: &ServerResponse| { &m.has_affected_row_count },
                    |m: &mut ServerResponse| { &mut m.has_affected_row_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "affected_row_count",
                    |m: &ServerResponse| { &m.affected_row_count },
                    |m: &mut ServerResponse| { &mut m.affected_row_count },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerResponse>(
                    "ServerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<ServerResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for ServerResponse {
    fn clear(&mut self) {
        self.request_id = 0;
        self.message.clear();
        self.column_description.clear();
        self.freetext_message.clear();
        self.response_id = 0;
        self.response_count = 0;
        self.has_affected_row_count = false;
        self.affected_row_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginSessionRequest {
    // message fields
    pub user_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginSessionRequest {
    fn default() -> &'a BeginSessionRequest {
        <BeginSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl BeginSessionRequest {
    pub fn new() -> BeginSessionRequest {
        ::std::default::Default::default()
    }

    // string user_name = 1;


    pub fn get_user_name(&self) -> &str {
        &self.user_name
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        &mut self.user_name
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BeginSessionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.user_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.user_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.user_name.is_empty() {
            os.write_string(1, &self.user_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginSessionRequest {
        BeginSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user_name",
                    |m: &BeginSessionRequest| { &m.user_name },
                    |m: &mut BeginSessionRequest| { &mut m.user_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BeginSessionRequest>(
                    "BeginSessionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeginSessionRequest {
        static mut instance: ::protobuf::lazy::Lazy<BeginSessionRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BeginSessionRequest::new)
        }
    }
}

impl ::protobuf::Clear for BeginSessionRequest {
    fn clear(&mut self) {
        self.user_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginSessionResponse {
    // message fields
    pub session_started: bool,
    pub message: ::protobuf::SingularPtrField<super::CommonTypes::StatusMessage>,
    pub challenge: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginSessionResponse {
    fn default() -> &'a BeginSessionResponse {
        <BeginSessionResponse as ::protobuf::Message>::default_instance()
    }
}

impl BeginSessionResponse {
    pub fn new() -> BeginSessionResponse {
        ::std::default::Default::default()
    }

    // bool session_started = 1;


    pub fn get_session_started(&self) -> bool {
        self.session_started
    }
    pub fn clear_session_started(&mut self) {
        self.session_started = false;
    }

    // Param is passed by value, moved
    pub fn set_session_started(&mut self, v: bool) {
        self.session_started = v;
    }

    // .siodb.StatusMessage message = 2;


    pub fn get_message(&self) -> &super::CommonTypes::StatusMessage {
        self.message.as_ref().unwrap_or_else(|| super::CommonTypes::StatusMessage::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::CommonTypes::StatusMessage) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut super::CommonTypes::StatusMessage {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> super::CommonTypes::StatusMessage {
        self.message.take().unwrap_or_else(|| super::CommonTypes::StatusMessage::new())
    }

    // bytes challenge = 3;


    pub fn get_challenge(&self) -> &[u8] {
        &self.challenge
    }
    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.challenge
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.challenge, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BeginSessionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.session_started = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.challenge)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_started != false {
            my_size += 2;
        }
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.challenge.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.challenge);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_started != false {
            os.write_bool(1, self.session_started)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.challenge.is_empty() {
            os.write_bytes(3, &self.challenge)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginSessionResponse {
        BeginSessionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "session_started",
                    |m: &BeginSessionResponse| { &m.session_started },
                    |m: &mut BeginSessionResponse| { &mut m.session_started },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::CommonTypes::StatusMessage>>(
                    "message",
                    |m: &BeginSessionResponse| { &m.message },
                    |m: &mut BeginSessionResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "challenge",
                    |m: &BeginSessionResponse| { &m.challenge },
                    |m: &mut BeginSessionResponse| { &mut m.challenge },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BeginSessionResponse>(
                    "BeginSessionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeginSessionResponse {
        static mut instance: ::protobuf::lazy::Lazy<BeginSessionResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BeginSessionResponse::new)
        }
    }
}

impl ::protobuf::Clear for BeginSessionResponse {
    fn clear(&mut self) {
        self.session_started = false;
        self.message.clear();
        self.challenge.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginSessionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginSessionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientAuthenticationRequest {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientAuthenticationRequest {
    fn default() -> &'a ClientAuthenticationRequest {
        <ClientAuthenticationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientAuthenticationRequest {
    pub fn new() -> ClientAuthenticationRequest {
        ::std::default::Default::default()
    }

    // bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ClientAuthenticationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientAuthenticationRequest {
        ClientAuthenticationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &ClientAuthenticationRequest| { &m.signature },
                    |m: &mut ClientAuthenticationRequest| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientAuthenticationRequest>(
                    "ClientAuthenticationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientAuthenticationRequest {
        static mut instance: ::protobuf::lazy::Lazy<ClientAuthenticationRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientAuthenticationRequest::new)
        }
    }
}

impl ::protobuf::Clear for ClientAuthenticationRequest {
    fn clear(&mut self) {
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientAuthenticationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientAuthenticationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientAuthenticationResponse {
    // message fields
    pub authenticated: bool,
    pub message: ::protobuf::SingularPtrField<super::CommonTypes::StatusMessage>,
    pub session_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientAuthenticationResponse {
    fn default() -> &'a ClientAuthenticationResponse {
        <ClientAuthenticationResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientAuthenticationResponse {
    pub fn new() -> ClientAuthenticationResponse {
        ::std::default::Default::default()
    }

    // bool authenticated = 1;


    pub fn get_authenticated(&self) -> bool {
        self.authenticated
    }
    pub fn clear_authenticated(&mut self) {
        self.authenticated = false;
    }

    // Param is passed by value, moved
    pub fn set_authenticated(&mut self, v: bool) {
        self.authenticated = v;
    }

    // .siodb.StatusMessage message = 2;


    pub fn get_message(&self) -> &super::CommonTypes::StatusMessage {
        self.message.as_ref().unwrap_or_else(|| super::CommonTypes::StatusMessage::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::CommonTypes::StatusMessage) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut super::CommonTypes::StatusMessage {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> super::CommonTypes::StatusMessage {
        self.message.take().unwrap_or_else(|| super::CommonTypes::StatusMessage::new())
    }

    // string session_id = 3;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientAuthenticationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.authenticated = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.authenticated != false {
            my_size += 2;
        }
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.session_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.authenticated != false {
            os.write_bool(1, self.authenticated)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.session_id.is_empty() {
            os.write_string(3, &self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientAuthenticationResponse {
        ClientAuthenticationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "authenticated",
                    |m: &ClientAuthenticationResponse| { &m.authenticated },
                    |m: &mut ClientAuthenticationResponse| { &mut m.authenticated },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::CommonTypes::StatusMessage>>(
                    "message",
                    |m: &ClientAuthenticationResponse| { &m.message },
                    |m: &mut ClientAuthenticationResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session_id",
                    |m: &ClientAuthenticationResponse| { &m.session_id },
                    |m: &mut ClientAuthenticationResponse| { &mut m.session_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientAuthenticationResponse>(
                    "ClientAuthenticationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientAuthenticationResponse {
        static mut instance: ::protobuf::lazy::Lazy<ClientAuthenticationResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientAuthenticationResponse::new)
        }
    }
}

impl ::protobuf::Clear for ClientAuthenticationResponse {
    fn clear(&mut self) {
        self.authenticated = false;
        self.message.clear();
        self.session_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientAuthenticationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientAuthenticationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ClientProtocol.proto\x12\x15siodb.client_protocol\x1a\x11CommonTyp\
    es.proto\"<\n\x07Command\x12\x1d\n\nrequest_id\x18\x01\x20\x01(\x04R\tre\
    questId\x12\x12\n\x04text\x18\x02\x20\x01(\tR\x04text\"\xfe\x02\n\x0eSer\
    verResponse\x12\x1d\n\nrequest_id\x18\x01\x20\x01(\x04R\trequestId\x12.\
    \n\x07message\x18\x02\x20\x03(\x0b2\x14.siodb.StatusMessageR\x07message\
    \x12G\n\x12column_description\x18\x03\x20\x03(\x0b2\x18.siodb.ColumnDesc\
    riptionR\x11columnDescription\x12)\n\x10freetext_message\x18\x04\x20\x03\
    (\tR\x0ffreetextMessage\x12\x1f\n\x0bresponse_id\x18\x05\x20\x01(\rR\nre\
    sponseId\x12%\n\x0eresponse_count\x18\x06\x20\x01(\rR\rresponseCount\x12\
    3\n\x16has_affected_row_count\x18\x07\x20\x01(\x08R\x13hasAffectedRowCou\
    nt\x12,\n\x12affected_row_count\x18\x08\x20\x01(\x04R\x10affectedRowCoun\
    t\"2\n\x13BeginSessionRequest\x12\x1b\n\tuser_name\x18\x01\x20\x01(\tR\
    \x08userName\"\x8d\x01\n\x14BeginSessionResponse\x12'\n\x0fsession_start\
    ed\x18\x01\x20\x01(\x08R\x0esessionStarted\x12.\n\x07message\x18\x02\x20\
    \x01(\x0b2\x14.siodb.StatusMessageR\x07message\x12\x1c\n\tchallenge\x18\
    \x03\x20\x01(\x0cR\tchallenge\";\n\x1bClientAuthenticationRequest\x12\
    \x1c\n\tsignature\x18\x01\x20\x01(\x0cR\tsignature\"\x93\x01\n\x1cClient\
    AuthenticationResponse\x12$\n\rauthenticated\x18\x01\x20\x01(\x08R\rauth\
    enticated\x12.\n\x07message\x18\x02\x20\x01(\x0b2\x14.siodb.StatusMessag\
    eR\x07message\x12\x1d\n\nsession_id\x18\x03\x20\x01(\tR\tsessionIdB\x02H\
    \x01J\xee\x12\n\x06\x12\x04\x06\0^\x01\n\xf2\x01\n\x01\x0c\x12\x03\x06\0\
    \x122\x94\x01\x20Copyright\x20(C)\x202019-2020\x20Siodb\x20GmbH.\x20All\
    \x20rights\x20reserved.\n\x20Use\x20of\x20this\x20source\x20code\x20is\
    \x20governed\x20by\x20a\x20license\x20that\x20can\x20be\x20found\n\x20in\
    \x20the\x20LICENSE\x20file.\n2Q\x20@file\x20Contains\x20protobuf\x20mess\
    ages\x20used\x20to\x20communicate\x20between\x20client\x20and\x20server.\
    \n\n\t\n\x02\x03\0\x12\x03\x08\0\x1b\n\x08\n\x01\x02\x12\x03\n\0\x1e\n\
    \x08\n\x01\x08\x12\x03\x0c\0\x1a\n\t\n\x02\x08\t\x12\x03\x0c\0\x1a\n-\n\
    \x02\x04\0\x12\x04\x0f\0\x16\x01\x1a!*\x20Command\x20from\x20client\x20t\
    o\x20server.\x20\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x0f\n\x1a\n\x04\x04\
    \0\x02\0\x12\x03\x12\x04\x1a\x1a\r*\x20Request\x20ID\x20\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\
    \x0b\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x18\x19\n\x1c\n\x04\x04\
    \0\x02\x01\x12\x03\x15\x04\x14\x1a\x0f*\x20Command\x20text\x20\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x15\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x12\x13\n\
    $\n\x02\x04\x01\x12\x04\x19\06\x01\x1a\x18*\x20Response\x20from\x20serve\
    r.\x20\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x16\n)\n\x04\x04\x01\x02\0\
    \x12\x03\x1c\x04\x1a\x1a\x1c*\x20Corresponding\x20request\x20ID.\x20\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x1c\x0b\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1c\x18\
    \x19\n%\n\x04\x04\x01\x02\x01\x12\x03\x1f\x04'\x1a\x18*\x20Messages\x20f\
    rom\x20server.\x20\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x1f\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1f\r\x1a\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x1f\x1b\"\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1f%&\
    \n8\n\x04\x04\x01\x02\x02\x12\x03\"\x046\x1a+*\x20Description\x20of\x20c\
    olumns\x20in\x20this\x20data\x20set.\x20\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\"\r\x1e\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\"\x1f1\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\"45\n7\n\x04\x04\x01\x02\x03\x12\x03%\x04)\x1a**\x20Free\
    \x20text\x20messages\x20without\x20status\x20code.\x20\n\x0c\n\x05\x04\
    \x01\x02\x03\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03%\r\x13\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03%\x14$\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03%'(\nN\n\x04\x04\x01\x02\x04\x12\x03(\x04\
    \x1b\x1aA*\x20Number\x20of\x20this\x20response\x20in\x20series\x20of\x20\
    responses.\x20Starts\x20with\x200.\x20\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x03(\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03(\x0b\x16\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03(\x19\x1a\nv\n\x04\x04\x01\x02\x05\x12\
    \x03/\x04\x1e\x1ai*\n\x20Number\x20of\x20reponses\x20in\x20series.\n\x20\
    May\x20be\x20sent\x20only\x20in\x20first\x20response.\n\x20Zero\x20value\
    \x20means\x20single\x20response.\n\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\
    \x03/\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03/\x0b\x19\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03/\x1c\x1d\n>\n\x04\x04\x01\x02\x06\x12\x032\
    \x04$\x1a1*\x20Indicates\x20that\x20affected\x20row\x20count\x20is\x20pr\
    esents.\x20\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x032\x04\x08\n\x0c\n\x05\
    \x04\x01\x02\x06\x01\x12\x032\t\x1f\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\
    \x032\"#\n#\n\x04\x04\x01\x02\x07\x12\x035\x04\"\x1a\x16*\x20Affected\
    \x20row\x20count.\x20\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x035\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x07\x01\x12\x035\x0b\x1d\n\x0c\n\x05\x04\x01\x02\
    \x07\x03\x12\x035\x20!\n$\n\x02\x04\x02\x12\x049\0=\x01\x1a\x18*\x20Begi\
    n\x20session\x20request\x20\n\n\n\x03\x04\x02\x01\x12\x039\x08\x1b\n\x19\
    \n\x04\x04\x02\x02\0\x12\x03<\x04\x19\x1a\x0c*\x20User\x20name\x20\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03<\x0b\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03<\x17\x18\n&\n\
    \x02\x04\x03\x12\x04@\0J\x01\x1a\x1a*\x20Begin\x20session\x20response.\
    \x20\n\n\n\x03\x04\x03\x01\x12\x03@\x08\x1c\n3\n\x04\x04\x03\x02\0\x12\
    \x03C\x04\x1d\x1a&*\x20Indication\x20that\x20session\x20is\x20started.\
    \x20\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03C\x04\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03C\t\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03C\x1b\x1c\
    \nW\n\x04\x04\x03\x02\x01\x12\x03F\x04\x1e\x1aJ*\x20Message\x20from\x20I\
    O\x20manager.\x20Set\x20in\x20case\x20of\x20error(session_started\x20=\
    \x20false).\x20\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03F\x04\x11\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03F\x12\x19\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03F\x1c\x1d\nC\n\x04\x04\x03\x02\x02\x12\x03I\x04\x18\x1a6*\
    \x20Challenge.\x20Sent\x20only\x20in\x20case\x20if\x20session\x20is\x20s\
    tarted.\x20\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03I\x04\t\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03I\n\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03I\x16\x17\n+\n\x02\x04\x04\x12\x04M\0Q\x01\x1a\x1f*\x20User\x20authe\
    ntication\x20request.\x20\n\n\n\x03\x04\x04\x01\x12\x03M\x08#\n'\n\x04\
    \x04\x04\x02\0\x12\x03P\x04\x18\x1a\x1a*\x20User\x20message\x20signature\
    .\x20\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03P\x04\t\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03P\n\x13\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03P\x16\x17\
    \n,\n\x02\x04\x05\x12\x04T\0^\x01\x1a\x20*\x20User\x20authentication\x20\
    response.\x20\n\n\n\x03\x04\x05\x01\x12\x03T\x08$\n6\n\x04\x04\x05\x02\0\
    \x12\x03W\x04\x1b\x1a)*\x20Indication\x20that\x20user\x20is\x20authentic\
    ated.\x20\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03W\x04\x08\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x03W\t\x16\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03W\x19\
    \x1a\n>\n\x04\x04\x05\x02\x01\x12\x03Z\x04\x1e\x1a1*\x20Message\x20from\
    \x20IO\x20manager.\x20Set\x20in\x20case\x20of\x20error.\x20\n\x0c\n\x05\
    \x04\x05\x02\x01\x06\x12\x03Z\x04\x11\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x03Z\x12\x19\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03Z\x1c\x1d\n&\n\
    \x04\x04\x05\x02\x02\x12\x03]\x04\x1a\x1a\x19*\x20ID\x20of\x20started\
    \x20session.\x20\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03]\x04\n\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x03]\x0b\x15\n\x0c\n\x05\x04\x05\x02\x02\
    \x03\x12\x03]\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
